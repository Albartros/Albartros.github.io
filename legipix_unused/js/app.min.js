"use strict";
String.prototype.nl2br = function() {
  return this.replace(/\n/g, "<br />")
};
var window_focus;
$(window).focus(function() {
  window_focus = !0
}).blur(function() {
  window_focus = !1
});
var Chat = {
    settings: {
      activeGroup: 0,
      firstMessageId: 0,
      hasLoadedMessages: !1,
      lastDate: null,
      lastMessageId: 0,
      lastUserId: 0
    },
    init: function() {
      this.loadEmojiAutocomplete(), this.loadGroupSelector(), this.loadImageUploader(), this.loadSendMessageListeners(), this.loadPusherConnections()
    },
    loadPusherConnections: function() {
      var t = this,
        e = new Pusher("9ead5fd3e1b2a6fbf947", {
          authEndpoint: "api/presence",
          auth: {
            headers: {
              "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
            }
          }
        });
      window.channels = 0, $(".chat__groups__group").each(function() {
        var a = $(this);
        window.channels++;
        var s = a.data("channel");
        window[s] = e.subscribe(s), window[s].bind("message", function(e) {
          t.appendChatMessage(e)
        })
      }), $(window).bind("beforeunload", function() {
        for (var t = window.channels; t > 0; t--) 1 == t ? e.unsubscribe(window["public-chat-" + t]) : e.unsubscribe(window["presence-chat-" + t])
      })
    },
    updateUser: function() {
      var t = this;
      $.ajax({
        url: "api/chat/thread",
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
        },
        data: {
          thread: t.settings.activeGroup
        },
        success: function() {
          console.log("succes")
        }
      })
    },
    parseParticipants: function(t) {
      var e = $("#chatOverlayUsers"),
        a = $();
      a = a.add($("<h2>", {
        "class": "chat__members__title",
        text: "Membres de ce Chat"
      }));
      for (var s = t.length - 1; s >= 0; s--) {
        var n = t[s];
        a = a.add($("<a>", {
          "class": "chat__participant",
          href: "#",
          id: "chat-participant-" + n.user.id,
          html: $("<div>", {
            "class": "chat__participant__avatar",
            html: $("<img>", {
              alt: "avatar-" + n.user.name,
              "class": "chat__participant__avatar__img avatar",
              src: "https://api.adorable.io/avatars/160/" + n.user.name + ".png"
            })
          }),
          append: $("<div>", {
            "class": "chat__participant__info",
            html: $("<div>", {
              "class": "chat__participant__info__name",
              text: n.user.name,
              append: $("<span>", {
                "class": "chat__participant__info__status",
                text: moment(n.last_read).isSame(moment(), "day") ? moment(n.last_read).format("HH:mm") : moment(n.last_read).format("LL")
              })
            })
          })
        }))
      }
      e.html(a)
    },
    appendChatMessage: function(t) {
      var e = this,
        a = $("#chatboxMessages");
      if (t[0].thread_id == e.settings.activeGroup) {
        var s = $("#chat-" + t[0].thread_id),
          n = s.find(".chat__groups__group__info__lastPost__label").text(null);
        s.find(".chat__groups__group__info__lastPost").html(t[0].body).prepend(n), s.find(".chat__groups__group__info__chat__time").text(moment(t[0].created_at).format("HH:mm")), a[0].scrollHeight - a.scrollTop() == a.outerHeight() ? (e.parseMessages(t, !0), a.scrollTop(1e10)) : e.parseMessages(t, !0), 0 == window_focus && $("#chatAudio").trigger("play"), e.updateUser();
        var o = 1e3;
        $(".chat__core__container__message__content__post__text--new").each(function() {
          var t = $(this);
          setTimeout(function() {
            t.removeClass("chat__core__container__message__content__post__text--new")
          }, o), o += 200
        })
      } else {
        var s = $("#chat-" + t[0].thread_id),
          n = s.find(".chat__groups__group__info__lastPost__label"),
          _ = isNaN(parseInt(n.text())) ? 1 : parseInt(n.text()) + 1;
        n.text(_), s.find(".chat__groups__group__info__lastPost").html(t[0].body).prepend(n), $("#chatAudio").trigger("play")
      }
    },
    loadSendMessageListeners: function() {
      var t = this;
      $("#chatboxSendButton").on("click", function() {
        return t.sendChatboxMessage(), !1
      }), $("#chatboxTextarea").keypress(function(e) {
        return 13 != e.which || e.shiftKey ? void 0 : (t.sendChatboxMessage(), !1)
      })
    },
    checkScroll: function(t) {
      var e = $(t.currentTarget);
      return e[0].scrollHeight - e.scrollTop() == e.outerHeight() ? "bottom" : 0 == e.scrollTop() ? "top" : void 0
    },
    sendChatboxMessage: function() {
      var t = this.settings.activeGroup,
        e = $("#chatboxSendButton"),
        a = $("#chatboxTextarea");
      return 0 == a.val().trim().length ? !1 : (e.toggleClass("button--loading"), void $.ajax({
        url: "api/chat/postMessage",
        type: "POST",
        headers: {
          "X-CSRF-TOKEN": $('meta[name="csrf-token"]').attr("content")
        },
        data: {
          id: parseInt(t),
          text: emojione.toShort(a.val())
        },
        success: function() {
          a.val(""), e.toggleClass("button--loading")
        },
        error: function() {
          alert("Votre message n'a pas été envoyé, veuillez réessayer"), e.toggleClass("button--loading")
        }
      }))
    },
    loadImageUploader: function() {
      var t = $("#chatboxButtonImageUpload");
      t.on("click", function() {
        return $("#chatboxImageUploaderInput").trigger("click"), !1
      }), $("#chatboxImageUploaderInput").on("change", function() {
        var e = new FormData;
        e.append("image", $(this).prop("files")[0]), $.ajax({
          url: "https://api.imgur.com/3/image",
          type: "POST",
          headers: {
            Authorization: "Client-ID eb413ab31709e16"
          },
          data: e,
          processData: !1,
          contentType: !1,
          success: function(e) {
            t.unbind().addClass("chat__core__form__button__imageButton--disabled");
            var a = $("#chatboxTextarea");
            a.val(e.data.link + " " + a.val()).focus()
          },
          error: function() {
            alert("Une erreur est survenue lors de l'upload de l'image")
          }
        })
      })
    },
    resizeContainer: function() {
      $(window).on("resize", function() {
        var t = $("#chatboxPosts, #chatboxGroups").hide();
        $("#chatboxMessages, #chatboxMembers").each(function() {
          var t = $(this);
          t.css({
            "max-height": "none"
          }).css({
            "max-height": t.height() + "px"
          })
        });
        t.show(), $("#chatboxMessages").scrollTop(1e10)
      }).resize()
    },
    loadEmojiAutocomplete: function() {
      var t = emoji_strategy;
      $(document).ready(function() {
        $("#chatboxTextarea").textcomplete([{
          match: /\B:([\-+\w]*)$/,
          search: function(e, a) {
            var s = [],
              n = [],
              o = [];
            $.each(t, function(t, a) {
              t.indexOf(e) > -1 ? s.push(t) : null !== a.aliases && a.aliases.indexOf(e) > -1 ? n.push(t) : null !== a.keywords && a.keywords.indexOf(e) > -1 && o.push(t)
            }), e.length >= 3 && (s.sort(function(t, e) {
              return t.length > e.length
            }), n.sort(function(t, e) {
              return t.length > e.length
            }), o.sort());
            var _ = s.concat(n).concat(o);
            a(_)
          },
          template: function(e) {
            return '<img class="emojione" src="//cdn.jsdelivr.net/emojione/assets/png/' + t[e].unicode + '.png"> :' + e + ":"
          },
          replace: function(t) {
            return ":" + t + ": "
          },
          index: 1,
          maxCount: 10
        }]).on({
          "textComplete:show": function() {
            setTimeout(function() {
              $("#textcomplete-dropdown-1").css({
                top: "-=10px"
              })
            }, 1)
          }
        })
      })
    },
    loadGroupSelector: function() {
      var t = this;
      $("#chatShowUsers, #chatOverlayClose").on("click", function(t) {
        $(".chat__core").toggleClass("chat__core--overlayed"), $(".chat__groups").toggleClass("chat__groups--overlayed"), $("#chatOverlay").toggleClass("chat__members--visible")
      }), $(".chat__groups__group").each(function() {
        var e = $(this);
        e.on("click", $.throttle(3500, !1, function(a) {
          if (a.preventDefault(), !e.hasClass("chat__groups__group--selected")) {
            $("#chatLoadMore").unbind().removeClass("chat__core__form__button__imageButton--disabled"), $(".chat__groups__group--selected").removeClass("chat__groups__group--selected"), $("#chatOverlayUsers").html(null);
            var s = $(this);
            s.addClass("chat__groups__group--selected"), s.find(".chat__groups__group__info__lastPost__label").text(""), t.settings.activeGroup = e.data("id"), t.settings.hasLoadedMessages = !1, t.settings.lastUserId = 0, t.settings.lastMessageId = "", $("#chatboxTextarea").val("").focus(), t.loadMessages()
          }
          return !1
        }))
      }), 0 == this.settings.activeGroup && $(".chat__groups__group").first().click()
    },
    parseMessages: function(t) {
      var e = this;
      if ("undefined" != typeof t.messages) var a = t.messages.length - t.unread,
        s = t.messages;
      else var a = t.length,
        s = t;
      var n = /(.*)(?:http|https)\:\/\/(?:i.imgur.com)\/([a-zA-Z0-9]{5,8})(\.jpg|\.gif|\.png)(.*)/i,
        o = /[-a-zA-Z0-9@:%_\+.~#?&\/\/=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&\/\/=]*)?/gi;
      if (1 == this.settings.hasLoadedMessages) var _ = $("#chatboxPosts");
      else var _ = $('<div id="chatbox_generated">');
      var i = 0;
      return $.each(s, function(s, r) {
        var c = moment(r.created_at),
          h = r.user.id,
          l = $("<div>", {
            "class": "chat__core__container__newMessages",
            html: $("<div>", {
              "class": "chat__core__container__newMessages__text",
              text: t.unread > 1 ? t.unread + " Nouveaux Messages" : "1 Nouveau Message"
            })
          }),
          d = $("<div>", {
            "class": "chat__core__container__newMessages",
            html: $("<div>", {
              "class": "chat__core__container__newMessages__text",
              text: c.isSame(moment(), "day") ? "Aujourd'hui" : c.format("LL")
            })
          }),
          u = $("<article>", {
            "class": "chat__core__container__message",
            "data-user": r.user.name,
            html: $("<div>", {
              "class": "chat__core__container__message__avatar",
              html: $("<img>", {
                alt: "avatar-" + r.user.name,
                "class": "avatar avatar--chat",
                src: "https://api.adorable.io/avatars/160/" + r.user.name + ".png"
              })
            })
          }),
          g = $("<div>", {
            "class": "chat__core__container__message__content",
            html: $("<header>", {
              "class": "chat__core__container__message__content__header",
              html: $("<a>", {
                "class": "chat__core__container__message__content__header__user",
                href: "#",
                text: r.user.name
              })
            })
          });
        if (n.test(r.body)) {
          var p = r.body.match(n);
          m = $("<div>", {
            "class": "chat__core__container__message__content__post",
            "data-id": r.id,
            html: $("<div>", {
              "class": 0 == e.settings.hasLoadedMessages ? "chat__core__container__message__content__post__text chat__core__container__message__content__post__text--withImgur" : "chat__core__container__message__content__post__text chat__core__container__message__content__post__text--withImgur chat__core__container__message__content__post__text--new",
              html: emojione.shortnameToImage(p[4].nl2br().replace(o, '<a href="$&" target="_blank">$&</a>')),
              prepend: $("<a>", {
                "class": "chat__core__container__message__content__post__text__imgur",
                href: "http://i.imgur.com/" + p[2] + p[3],
                target: "_blank",
                html: $("<img>", {
                  alt: "imgur-" + p[2],
                  "class": "chat__core__container__message__content__post__text__imgur__img",
                  onerror: 'this.src = "//i.imgur.com/' + p[2] + p[3] + '"',
                  src: "//i.imgur.com/" + p[2] + "m" + p[3]
                })
              }),
              append: $("<time>", {
                "class": "chat__core__container__message__content__post__text__time",
                text: moment(r.created_at).format("HH:mm")
              })
            })
          })
        } else var m = $("<div>", {
          "class": "chat__core__container__message__content__post",
          "data-id": r.id,
          html: $("<div>", {
            "class": 0 == e.settings.hasLoadedMessages ? "chat__core__container__message__content__post__text" : "chat__core__container__message__content__post__text chat__core__container__message__content__post__text--new",
            html: emojione.shortnameToImage($.trim(r.body.nl2br()).replace(o, '<a href="$&" target="_blank">$&</a>')),
            append: $("<time>", {
              "class": "chat__core__container__message__content__post__text__time",
              text: moment(r.created_at).format("HH:mm")
            })
          })
        }); if (e.settings.lastUserId == h) {
          var f = [];
          0 == e.settings.lastDate.isSame(c, "day") || i == a ? (i == a && f.push(l), 0 == e.settings.lastDate.isSame(c, "day") && (f.push(d), e.settings.lastDate = c), f.push(u.append(g.append(m))), _.append(f)) : _.find(".chat__core__container__message__content__post").last().after(m)
        } else {
          e.settings.lastUserId = h;
          var f = [];
          i == a && f.push(l), 0 == e.settings.lastDate.isSame(c, "day") && (f.push(d), e.settings.lastDate = c), f.push(u.append(g.append(m))), _.append(f)
        }
        i++
      }), _
    },
    loadUsers: function(t) {
      if ("undefined" != typeof t) {
        var e = window["presence-chat-" + this.settings.activeGroup],
          a = e.members.members;
        $.when(this.parseParticipants(t)).then(function() {
          $.each(a, function(t, e) {
            $("#chat-participant-" + e.id).find(".chat__participant__info__status").addClass("chat__participant__info__status--online").text("connecté")
          }), e.bind("pusher:member_removed", function(t) {
            $("#chat-participant-" + t.id).find(".chat__participant__info__status").removeClass("chat__participant__info__status--online").text(moment().format("HH:mm"))
          }), e.bind("pusher:member_added", function(t) {
            $("#chat-participant-" + t.id).find(".chat__participant__info__status").addClass("chat__participant__info__status--online").text("connecté")
          })
        })
      }
    },
    loadMessages: function(t) {
      var e = this,
        a = ($("#chatboxLoadingMessage").show(), $("#chatboxPosts").hide()),
        s = $(".chat__core__form__button__imageButton").hide();
      $.ajax({
        url: 1 == e.settings.hasLoadedMessages ? "api/chat/thread/" + e.settings.activeGroup + "/" + e.settings.firstMessageId : "api/chat/thread/" + e.settings.activeGroup,
        type: "GET",
        dataType: "json",
        success: function(t) {
          if (0 != t.messages.length && (e.settings.firstMessageId = t.messages[0].id, e.settings.lastDate = moment()), 0 == e.settings.hasLoadedMessages) {
            var n = e.parseMessages(t, !1);
            e.loadUsers(t.participants), a.empty().html(n.html()).waitForImages(function() {
              $("#chatboxLoadingMessage").hide(), $(this).show(), $("#chatboxMessages").scrollTop(1e10), e.settings.hasLoadedMessages = !0;
              var a = 400;
              s.delay(1e3).not($("undefined" == typeof t.participants ? ".notPublic" : "")).each(function() {
                var t = $(this);
                setTimeout(function() {
                  t.show()
                }, a), a += 200
              })
            }), $("#chatLoadMore").click(function() {
              e.loadMessages()
            })
          } else if (0 == t.messages.length) {
            var o = $("<div>", {
              "class": "chat__core__container__newMessages noMoreMessages",
              html: $("<div>", {
                "class": "chat__core__container__newMessages__text",
                text: "Fin des messages"
              })
            });
            $("#chatboxLoadingMessage").hide(), $(".noMoreMessages").remove(), a.prepend(o).show(), $("#chatLoadMore").unbind().addClass("chat__core__form__button__imageButton--disabled").hide();
            var _ = 400;
            s.delay(1e3).not($("undefined" == typeof t.participants ? ".notPublic" : "")).each(function() {
              var t = $(this);
              setTimeout(function() {
                t.show()
              }, _), _ += 200
            })
          } else {
            var i = a.html();
            $("#chatboxLoadingMessage").hide(), a.empty().html(e.parseMessages(t, !1).html() + i).show(), $(".chat__core__container__message__content__post__text--new").removeClass("chat__core__container__message__content__post__text--new");
            var _ = 400;
            s.delay(1e3).not($("undefined" == typeof t.participants ? ".notPublic" : "")).each(function() {
              var t = $(this);
              setTimeout(function() {
                t.show()
              }, _), _ += 200
            })
          }
        },
        error: function() {
          alert("Les messages n'ont pas été récupérés")
        }
      })
    }
  },
  Global = {
    init: function() {
      this.configAjax(), this.disableLinks(), this.launchLogo()
    },
    configAjax: function() {
      $(document).ajaxStart(function() {
        $("#ajaxSpinner").toggleClass("ajax-active")
      }).ajaxStop(function() {
        $("#ajaxSpinner").toggleClass("ajax-active")
      })
    },
    disableLinks: function() {
      $(".disabled").on("click", function(t) {
        return t.preventDefault(), !1
      })
    },
    launchLogo: function() {
      setTimeout(function() {
        $(".nav__logo__image").toggleClass("nav__logo__image--shown")
      }, 5e3)
    }
  };